CREATE TABLE IF NOT EXISTS "Playlist" (
    "id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "snapshot_id" TEXT,
    "name" TEXT NOT NULL,
    "collaborative" INTEGER NOT NULL,
    "description" TEXT,
    "public" INTEGER,
    "count" INTEGER NOT NULL DEFAULT 0,
    "count_unique" INTEGER NOT NULL DEFAULT 0
) WITHOUT ROWID;

CREATE TRIGGER playlist_modified AFTER
UPDATE ON Playlist BEGIN
UPDATE Playlist
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    id = new.id;

END;

CREATE UNIQUE INDEX "IX_Playlist_snapshot_id" ON "Playlist" ("snapshot_id" ASC);

CREATE TABLE IF NOT EXISTS "Artist" (
    "id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "name" TEXT NOT NULL
) WITHOUT ROWID;

CREATE TRIGGER artist_modified AFTER
UPDATE ON Artist BEGIN
UPDATE Artist
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    id = new.id;

END;

CREATE TABLE IF NOT EXISTS "Album" (
    "id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "name" TEXT NOT NULL,
    "total_tracks" INTEGER NOT NULL,
    "album_type" TEXT,
    "release_date" TEXT
) WITHOUT ROWID;

CREATE TRIGGER album_modified AFTER
UPDATE ON Album BEGIN
UPDATE Album
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    id = new.id;

END;

CREATE TABLE IF NOT EXISTS "Track" (
    "id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "name" TEXT NOT NULL,
    "track_number" INTEGER NOT NULL,
    "disc_number" INTEGER NOT NULL,
    "duration_ms" INTEGER NOT NULL,
    "album_id" TEXT NOT NULL,
    CONSTRAINT "fk_track_albumid" FOREIGN KEY ("album_id") REFERENCES "Album" ("id")
) WITHOUT ROWID;

CREATE TRIGGER track_modified AFTER
UPDATE ON Track BEGIN
UPDATE Track
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    id = new.id;

END;

CREATE TABLE IF NOT EXISTS "AlbumArtist" (
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "album_id" TEXT NOT NULL,
    "artist_id" TEXT NOT NULL,
    PRIMARY KEY ("album_id", "artist_id"),
    CONSTRAINT "fk_albumartist_albumid" FOREIGN KEY ("album_id") REFERENCES "Album" ("id"),
    CONSTRAINT "fk_albumartist_artistid" FOREIGN KEY ("artist_id") REFERENCES "Artist" ("id")
) WITHOUT ROWID;

CREATE TRIGGER album_artist_modified AFTER
UPDATE ON AlbumArtist BEGIN
UPDATE AlbumArtist
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    album_id = new.album_id
    AND artist_id = new.artist_id;

END;

CREATE TABLE IF NOT EXISTS "TrackArtist" (
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "track_id" TEXT NOT NULL,
    "artist_id" TEXT NOT NULL,
    PRIMARY KEY ("track_id", "artist_id"),
    CONSTRAINT "fk_trackartist_trackid" FOREIGN KEY ("track_id") REFERENCES "Track" ("id"),
    CONSTRAINT "fk_trackartist_artistid" FOREIGN KEY ("artist_id") REFERENCES "Artist" ("id")
) WITHOUT ROWID;

CREATE INDEX "IX_Album_release_date" ON "Album" ("release_date" ASC);

CREATE TRIGGER track_artist_modified AFTER
UPDATE ON TrackArtist BEGIN
UPDATE TrackArtist
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    track_id = new.track_id
    AND artist_id = new.artist_id;

END;

CREATE TABLE IF NOT EXISTS "PlaylistTrack" (
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "track_id" TEXT NOT NULL,
    "playlist_id" TEXT NOT NULL,
    "playlist_snapshot_id" TEXT,
    "added_at" DATETIME NOT NULL,
    CONSTRAINT "PK_PlaylistTrack" PRIMARY KEY ("track_id", "playlist_id", "added_at"),
    CONSTRAINT "fk_playlisttrack_trackid" FOREIGN KEY ("track_id") REFERENCES "Track" ("id"),
    CONSTRAINT "fk_playlisttrack_playlistid" FOREIGN KEY ("playlist_id") REFERENCES "Playlist" ("id")
) WITHOUT ROWID;

CREATE INDEX "IX_PlaylistTrack_added_at" ON "PlaylistTrack" ("added_at" DESC);

CREATE INDEX "IX_PlaylistTrack_album_id" ON "PlaylistTrack" ("album_id" ASC);

CREATE INDEX "IX_PlaylistTrack_playlist_id" ON "PlaylistTrack" ("playlist_id" ASC);

CREATE INDEX "IX_PlaylistTrack_playlist_snapshot_id" ON "PlaylistTrack" ("playlist_snapshot_id" ASC);

CREATE TRIGGER playlist_track_modified AFTER
UPDATE ON PlaylistTrack BEGIN
UPDATE PlaylistTrack
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    track_id = new.track_id
    AND playlist_id = new.playlist_id
    AND added_at = new.added_at;

END;

CREATE TABLE IF NOT EXISTS "SavedAlbum" (
    "id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "label" TEXT NOT NULL,
    CONSTRAINT "fk_savedalbum_album" FOREIGN KEY ("id") REFERENCES "Album" ("id")
) WITHOUT ROWID;

CREATE TABLE IF NOT EXISTS "ExternalId" (
    "album_id" TEXT PRIMARY KEY,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    "ean" TEXT,
    "isrc" TEXT,
    "upc" TEXT,
    CONSTRAINT "fk_externalid_album" FOREIGN KEY ("album_id") REFERENCES "Album" ("id")
) WITHOUT ROWID;

CREATE INDEX "IX_SavedAlbum_id" ON "SavedAlbum" ("id" ASC);

CREATE INDEX "IX_ExternalId_album_id" ON "ExternalId" ("album_id" ASC);

CREATE TABLE "PlaylistAlbum" (
    "artists" TEXT NOT NULL,
    "album" TEXT NOT NULL,
    "track_count" INTEGER NOT NULL,
    "release_year" TEXT,
    "playlist" TEXT,
    "added_at" DATETIME NOT NULL,
    "playlist_id" TEXT NOT NULL,
    "album_id" TEXT NOT NULL,
    "created_at" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "modified_at" DATETIME,
    CONSTRAINT "PK_Track" PRIMARY KEY ("album_id", "playlist_id")
);

CREATE INDEX "IX_PlaylistAlbum_id" ON "PlaylistAlbum" ("artists" ASC);

CREATE INDEX "IX_PlaylistAlbum_playlist_id" ON "PlaylistAlbum" ("playlist_id");

CREATE INDEX "IX_PlaylistAlbum_album_id" ON "PlaylistAlbum" ("album_id");

CREATE INDEX "IX_PlaylistAlbum_release_year" ON "PlaylistAlbum" ("release_year" ASC);

CREATE INDEX "IX_PlaylistAlbum_artists_album" ON "PlaylistAlbum" ("artists", "album");

CREATE INDEX "IX_PlaylistAlbum_album_artists" ON "PlaylistAlbum" ("album", "artists");

CREATE INDEX "IX_PlaylistAlbum_playlist_artists_album" ON "PlaylistAlbum" ("playlist", "artists", "album");

CREATE INDEX "IX_PlaylistAlbum_release_year_artists_album" ON "PlaylistAlbum" ("release_year", "artists", "album");

CREATE TRIGGER playlist_album_modified AFTER
UPDATE ON PlaylistAlbum BEGIN
UPDATE PlaylistAlbum
SET
    modified_at = CURRENT_TIMESTAMP
WHERE
    album_id = new.album_id
    AND playlist_id = new.playlist_id;

END;
